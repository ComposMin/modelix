package de.q60.webmps.server;

/*Generated by MPS */

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ModelServer extends WebSocketServer {
    private static final Logger LOG = LogManager.getLogger(ModelServer.class);
    private static final Pattern HASH_PATTERN = Pattern.compile("[a-zA-Z0-9\\-_]{43}");

    private MyRedisClient redisClient;
    private IKeyValueStore store;
    private Map<WebSocket, Session> sessions = new HashMap<WebSocket, Session>();
    private Map<String, MessageHandler> messageHandlers = new HashMap<String, MessageHandler>();
    private Set<String> subscribedKeys = new HashSet<String>();

    {
        messageHandlers.put("get", new MessageHandler() {
            @Override
            public void handle(WebSocket conn, JSONObject message) {
                String key = message.getString("key");
                String value = store.get(key);
                JSONObject reply = new JSONObject();
                reply.put("type", "get");
                reply.put("key", key);
                reply.put("value", value);
                conn.send(reply.toString());
            }
        });
        messageHandlers.put("getRecursively", new MessageHandler() {
            @Override
            public void handle(WebSocket conn, JSONObject message) {
                String key = message.getString("key");

                JSONObject reply = new JSONObject();
                reply.put("type", "getRecursively");

                JSONArray entries = new JSONArray();
                collect(key, entries, new HashSet<>());
                reply.put("entries", entries);

                conn.send(reply.toString());
            }

            private void collect(String key, JSONArray acc, Set<String> foundKeys) {
                if (foundKeys.contains(key)) return;
                foundKeys.add(key);

                String value = store.get(key);
                JSONObject entry = new JSONObject();
                entry.put("key", key);
                entry.put("value", value);
                acc.put(entry);

                if (value != null) {
                    Matcher matcher = HASH_PATTERN.matcher(value);
                    while (matcher.find()) {
                        collect(matcher.group(), acc, foundKeys);
                    }
                }
            }
        });
        messageHandlers.put("put", new MessageHandler() {
            @Override
            public void handle(WebSocket conn, JSONObject message) {
                String key = message.getString("key");
                String value = message.getString("value");
                store.put(key, value);

                if (subscribedKeys.contains(key)) {
                    JSONObject notification = new JSONObject();
                    notification.put("type", "change");
                    notification.put("key", key);
                    notification.put("value", value);
                    String notificationStr = notification.toString();
                    for (Session session : sessions.values()) {
                        if (!(session.isSubscribed(key))) {
                            continue;
                        }
                        WebSocket c = session.getConnection();
                        if (c == conn) {
                            continue;
                        }
                        c.send(notificationStr);
                    }
                }

            }
        });
        messageHandlers.put("subscribe", new MessageHandler() {
            @Override
            public void handle(WebSocket conn, JSONObject message) {
                String key = message.getString("key");
                subscribedKeys.add(key);
                sessions.get(conn).subscribe(key);
            }
        });
        messageHandlers.put("flushdb", new MessageHandler() {
            @Override
            public void handle(WebSocket conn, JSONObject message) {
                redisClient.flushdb();
            }
        });
    }

    public ModelServer(InetSocketAddress bindTo) {
        super(bindTo);
        redisClient = new MyRedisClient();
        store = new CachingKeyValueStore(redisClient);
    }

    public void broadcast(String message) {
        for (Session session : sessions.values()) {
            session.getConnection().send(message);
        }
    }

    @Override
    public void onOpen(WebSocket conn, ClientHandshake handshake) {
        sessions.put(conn, new Session(conn));
    }

    @Override
    public void onClose(WebSocket conn, int code, String reason, boolean remote) {
        sessions.remove(conn).dispose();
    }

    @Override
    public void onMessage(WebSocket conn, String message) {
        processMessage(conn, new JSONObject(message));
    }

    @Override
    public void onError(WebSocket conn, Exception exception) {
        System.out.println("Error " + exception.getMessage());
        exception.printStackTrace();
        if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Error " + conn, exception);
        }
    }

    @Override
    public void onStart() {
    }

    @Override
    public void stop() {
        try {
            super.stop();
            for (Session session : sessions.values()) {
                session.dispose();

            }
            redisClient.dispose();
        } catch (InterruptedException ex) {
            if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("", ex);
            }
        } catch (IOException ex) {
            if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("", ex);
            }
        }
    }

    public void processMessage(WebSocket conn, JSONObject message) {
        String type = message.getString("type");
        MessageHandler handler = messageHandlers.get(type);
        if (handler != null) {
            handler.handle(conn, message);
        }
    }

}
