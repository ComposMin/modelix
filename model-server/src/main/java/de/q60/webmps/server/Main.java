package de.q60.webmps.server;

/*Generated by MPS */


import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.AbstractHandler;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.DefaultHandler;
import org.eclipse.jetty.server.handler.HandlerList;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;

public class Main {
    public static void main(String[] args) {
        System.out.println("Server process started");

        System.out.println("Waiting ");

        try {
            String portStr = System.getenv("PORT");
            InetSocketAddress bindTo = new InetSocketAddress(InetAddress.getByName("0.0.0.0"),
                    portStr == null ? 28101 : Integer.parseInt(portStr));

            final Server server = new Server(bindTo);

            ServletContextHandler wsHandler = new ServletContextHandler();
            wsHandler.addServlet(new ServletHolder(new ModelServerServlet(new ModelServer(new IgniteStoreClient()))), "/ws");
            wsHandler.addServlet(new ServletHolder(new HttpServlet() {
                @Override
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    resp.setContentType("text/html");
                    resp.getWriter().println("Model Server");
                }
            }), "/");

            HandlerList handlerList = new HandlerList();
            handlerList.addHandler(wsHandler);

            server.setHandler(handlerList);
            server.start();
            System.out.println("Server started");

            Runtime.getRuntime().addShutdownHook(new Thread() {
                @Override
                public void run() {
                    try {
                        server.stop();
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    }
                }
            });
        } catch (Exception ex) {
            System.out.println("Server failed: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private static Handler withContext(String path, Handler handler) {
        ContextHandler contextHandler = new ContextHandler();
        contextHandler.setContextPath(path);
        contextHandler.setHandler(handler);
        return contextHandler;
    }
}
