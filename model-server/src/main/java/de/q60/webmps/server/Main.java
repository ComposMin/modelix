package de.q60.webmps.server;

/*Generated by MPS */


import org.apache.commons.io.IOUtils;
import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.AbstractHandler;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.DefaultHandler;
import org.eclipse.jetty.server.handler.HandlerList;
import org.eclipse.jetty.server.handler.ResourceHandler;
import org.eclipse.jetty.servlet.FilterHolder;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.servlets.CrossOriginFilter;
import org.eclipse.jetty.servlets.EventSource;
import org.eclipse.jetty.servlets.EventSourceServlet;
import org.json.JSONObject;

import javax.servlet.DispatcherType;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.swing.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.EnumSet;
import java.util.function.Predicate;

public class Main {
    public static void main(String[] args) {
        System.out.println("Max memory (bytes): " + Runtime.getRuntime().maxMemory());
        System.out.println("Server process started");

        System.out.println("Waiting ");

        try {
            String portStr = System.getenv("PORT");
            InetSocketAddress bindTo = new InetSocketAddress(InetAddress.getByName("0.0.0.0"),
                    portStr == null ? 28101 : Integer.parseInt(portStr));
            IgniteStoreClient storeClient = new IgniteStoreClient();
            ModelServer modelServer = new ModelServer(storeClient);
            final Server server = new Server(bindTo);

            ServletContextHandler servletHandler = new ServletContextHandler();
            servletHandler.addServlet(new ServletHolder(new ModelServerServlet(modelServer)), "/ws");

            EventSourceServlet sseServlet = new SSETestServlet();
            servletHandler.addServlet(new ServletHolder(sseServlet), "/sse");

            servletHandler.addServlet(new ServletHolder(new HttpServlet() {
                @Override
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    String key = req.getPathInfo().substring(1);
                    String value = storeClient.get(key);
                    if (value == null) {
                        resp.setStatus(HttpServletResponse.SC_NOT_FOUND);
                    } else {
                        resp.setContentType("text/plain");
                        resp.getWriter().print(value);
                    }
                }
            }), "/get/*");

            servletHandler.addServlet(new ServletHolder(new HttpServlet() {
                @Override
                protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    String key = req.getPathInfo().substring(1);
                    long value = storeClient.generateId(key);
                    resp.setContentType("text/plain");
                    resp.setCharacterEncoding(StandardCharsets.UTF_8.toString());
                    resp.getWriter().print(Long.toString(value));
                }
            }), "/counter/*");

            servletHandler.addServlet(new ServletHolder(new HttpServlet() {
                @Override
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    String key = req.getPathInfo().substring(1);
                    resp.setContentType("application/json");
                    resp.getWriter().print(modelServer.collect(key).toString(2));
                }
            }), "/getRecursively/*");

            servletHandler.addServlet(new ServletHolder(new HttpServlet() {
                @Override
                protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    String key = req.getPathInfo().substring(1);
                    String value = IOUtils.toString(req.getInputStream(), StandardCharsets.UTF_8);
                    storeClient.put(key, value);
                    resp.setStatus(HttpServletResponse.SC_OK);
                    resp.setContentType("text/plain");
                    resp.setCharacterEncoding(StandardCharsets.UTF_8.toString());
                    resp.getWriter().print("OK");
                }
            }), "/put/*");

            servletHandler.addServlet(new ServletHolder(new HttpServlet() {
                @Override
                protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    resp.setContentType("text/plain");
                    resp.getWriter().println("Model Server");
                }
            }), "/");

            servletHandler.addServlet(new ServletHolder(new EventSourceServlet() {
                @Override
                protected EventSource newEventSource(HttpServletRequest req) {
                    final String subscribedKey = req.getPathInfo().substring(1);
                    return new EventSource() {
                        private Emitter emitter;
                        private IKeyListener listener = new IKeyListener() {
                            @Override
                            public void changed(String changedKey, String value) {
                                if (emitter == null) return;
                                if (subscribedKey.equals(changedKey)) {
                                    try {
                                        emitter.data(value);
                                    } catch (IOException e) {
                                        System.out.println(e.getMessage());
                                        e.printStackTrace();
                                    }
                                }
                            }
                        };

                        @Override
                        public void onOpen(Emitter emitter) throws IOException {
                            this.emitter = emitter;
                            storeClient.listen(subscribedKey, listener);
                        }

                        @Override
                        public void onClose() {
                            storeClient.removeListener(subscribedKey, listener);
                            emitter = null;
                        }
                    };
                }
            }), "/subscribe/*");

            HandlerList handlerList = new HandlerList();
            handlerList.addHandler(servletHandler);

            server.setHandler(handlerList);
            server.start();
            System.out.println("Server started");

            Runtime.getRuntime().addShutdownHook(new Thread() {
                @Override
                public void run() {
                    try {
                        server.stop();
                    } catch (Exception ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    }
                }
            });
        } catch (Exception ex) {
            System.out.println("Server failed: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private static Handler withContext(String path, Handler handler) {
        ContextHandler contextHandler = new ContextHandler();
        contextHandler.setContextPath(path);
        contextHandler.setHandler(handler);
        return contextHandler;
    }

    private static class SSETestServlet extends EventSourceServlet {
        @Override
        protected EventSource newEventSource(HttpServletRequest request) {
            return new EventSource() {
                private Emitter emitter;
                private Timer timer = new Timer(1000, (e) -> {
                    if (emitter == null) return;
                    try {
                        emitter.data("data-" + System.currentTimeMillis());
                        emitter.event("time","time-" + System.currentTimeMillis());
                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                        ex.printStackTrace();
                    }
                });

                @Override
                public void onOpen(Emitter emitter) throws IOException {
                    this.emitter = emitter;
                    timer.start();
                }

                @Override
                public void onClose() {
                    timer.stop();
                    emitter = null;
                }
            };
        }
    }
}
